# [['Method', 1, 0, [['fmcd', 0.32896445654873524, 0.4502392344497608, 0.39292893407556323], 
#                    ['olivehawkins', 0.40366514335145987, 0.4502392344497608, 0.4144222415291051]]], 
#  ['OutlierFraction', 6, 0, [[0.5, 0.40366514335145987, 0.4502392344497608, 0.4144222415291051], 
#                             [0.4, 0.40883625611794705, 0.4502392344497608, 0.42501093135111495], 
#                             [0.3, 0.4112699791274884, 0.4502392344497608, 0.4298245614035087], 
#                             [0.25, 0.4119677505729925, 0.4502392344497608, 0.4337137840210711], 
#                             [0.2, 0.4182966272037978, 0.4502392344497608, 0.43185840707964596], 
#                             [0.1, 0.42615344771808705, 0.4502392344497608, 0.4280607685433422], 
#                             [0.05, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], 
#  ['NumTrials', 0, 0, [[500, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], 
#  ['ReweightingMethod', 0, 0, [['rfch', 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], 
#  ['NumConcentrationSteps', 0, 0, [[10, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], 
#  ['StartMethod', 0, 0, [['classical', 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], 
 
#  ['Method', 1, 0, [['olivehawkins', 0.43268339633058955, 0.44992025518341305, 0.42702702702702683], 
#                    ['fmcd', 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], 
 
#  ['Method', 0, 0, [['fmcd', 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], 
#  ['OutlierFraction', 0, 0, [[0.05, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], 
#  ['NumTrials', 0, 0, [[500, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], 
#  ['BiasCorrection', 0, 0, [[1, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]]]

import os
import glob
import pandas as pd
import mat73
from scipy.io import loadmat
from sklearn.covariance import EllipticEnvelope
import numpy as np
from sklearn import metrics
from copy import copy, deepcopy
from sklearn.metrics.cluster import adjusted_rand_score
# import pingouin as pg
import random
import seaborn as sns
import matplotlib.pyplot as plt
sns.set_theme(style="whitegrid")
# import scikit_posthocs as sp
import scipy.stats as stats
from scipy.stats import gmean
import math
import scipy.stats as ss
import bisect 

a = [['Method', 1, 0, [['fmcd', 0.32896445654873524, 0.4502392344497608, 0.39292893407556323], ['olivehawkins', 0.40366514335145987, 0.4502392344497608, 0.4144222415291051]]], ['OutlierFraction', 6, 0, [[0.5, 0.40366514335145987, 0.4502392344497608, 0.4144222415291051], [0.4, 0.40883625611794705, 0.4502392344497608, 0.42501093135111495], [0.3, 0.4112699791274884, 0.4502392344497608, 0.4298245614035087], [0.25, 0.4119677505729925, 0.4502392344497608, 0.4337137840210711], [0.2, 0.4182966272037978, 0.4502392344497608, 0.43185840707964596], [0.1, 0.42615344771808705, 0.4502392344497608, 0.4280607685433422], [0.05, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], ['NumTrials', 0, 0, [[500, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], ['ReweightingMethod', 0, 0, [['rfch', 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], ['NumConcentrationSteps', 0, 0, [[10, 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], ['StartMethod', 0, 0, [['classical', 0.43268339633058955, 0.4502392344497608, 0.42702702702702683]]], ['Method', 1, 0, [['olivehawkins', 0.43268339633058955, 0.44992025518341305, 0.42702702702702683], ['fmcd', 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.44992025518341305, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.6123127055239201, 0.620414673046252, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.5371090249864056, 0.4443381180223286, 0.4480088495575221]]], ['Method', 0, 0, [['fmcd', 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], ['OutlierFraction', 0, 0, [[0.05, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], ['NumTrials', 0, 0, [[500, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]], ['BiasCorrection', 0, 0, [[1, 0.7184431231358469, 0.53596757852077, 0.4480088495575221]]]]

def get_angle(p1x, p1y, p2x, p2y):
    dx = p2x - p1x
    dy = p2y - p1y
    theta = math.atan2(dy, dx)
    angle = math.degrees(theta)  # angle is in (-180, 180]
    if angle < 0:
        angle = 360 + angle
    return angle

def draw_graph_2(blind_route):
    ## Without F1 Score
    fig = plt.Figure()
    
    start = end = 0
    for i in range(len(blind_route)):
        default = blind_route[i][2]
        start = end
        end = blind_route[i][1] - (default-start)
        
        ari_p = blind_route[i][3]
        # print()
        ari_scores = []
        ari_x = []
        for j in range(len(ari_p)):
            ari_scores.append(ari_p[j][1])
            ari_x.append(j-(default-start))
        # plt.plot(ari_x, ari_scores, '-')
        for k in range(len(ari_scores)-1):
            plt.arrow(ari_x[k], ari_scores[k], ari_x[k+1]-ari_x[k], ari_scores[k+1]- ari_scores[k],
                      head_width = 0.02,
                      width = 0.001,
                      color='black')

    plt.ylabel("Cross-run ARI")
    plt.xticks(ticks= [])
    # plt.savefig("Fig/GD/Routes/"+filename+"_MatEE_Trajectory.pdf", bbox_inches="tight", pad_inches=0)
    plt.show()
    ## With F1 Score
    fig = plt.Figure()
    start = end = 0
    ari_scores = []
    ari_x = []
    for i in range(len(blind_route)):
        default = blind_route[i][2]
        start = end
        end = blind_route[i][1] - (default-start)
        
        ari_p = blind_route[i][3]        
        for j in range(len(ari_p)):
            if len(ari_scores) > 0:
                if ari_p[j][1] < max(ari_scores):
                    continue
                if ari_p[j][1] == ari_scores[-1] and ari_p[j][3] == ari_x[-1]:
                    continue
            ari_scores.append(ari_p[j][1])
            ari_x.append(ari_p[j][3])
        for k in range(len(ari_scores)-1):
            plt.annotate('', xy=(ari_x[k], ari_scores[k]), xytext=(ari_x[k+1], ari_scores[k+1]),
                         arrowprops=dict(arrowstyle='<-', color='red'))
            
       
    plt.ylabel("Cross-run ARI")
    plt.xlabel("F1 Score")
    plt.savefig("Fig/GD/0Tesst.pdf", bbox_inches="tight", pad_inches=0)
    plt.show()
draw_graph_2(a)